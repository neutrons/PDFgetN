	SUBROUTINE SMOOTH(X,Y,DY,N,S,A,B,C,D)
C
C     SMOOTHING BY SPLINE FUNCTIONS
C
C     S/R TRANSCRIBED FROM ANL AMD SUBROUTINE DESCRIPTION
C     ANL E350S, SMOOTH (RECEIVED FROM B. GARBO)
C     20 AUGUST, 1981. JMC
C
C     X(I) ARE STRICTLY INCREASING {OR DECREASING--SEE COMMENT BELOW}
C
C
C $Id: smooth.f,v 1.1 2006/03/12 09:59:25 tproffen Exp $
C
	INCLUDE 'parameters.inc'
	REAL*4 X(*),Y(*),DY(*),A(*),B(*),C(*),D(*)
	REAL*4 R(N_CHN),R1(N_CHN),R2(N_CHN),
     1             T(N_CHN),T1(N_CHN),U(N_CHN),V(N_CHN) 

	NM1=N-1

	H=X(2)-X(1)
	F=(Y(2)-Y(1))/H
	DO I=2,NM1
	  G=H
	  H=X(I+1)-X(I)
	  E=F
	  F=(Y(I+1)-Y(I))/H
	  A(I)=F-E
	  T(I)=2.0*(G+H)/3.0
	  T1(I)=H/3.0
	  R2(I)=DY(I-1)/G
	  R(I)=DY(I+1)/H
	  R1(I)=-DY(I)/G-DY(I)/H
	ENDDO
	R(1)=0.0
	R1(N)=0.0
	R2(N)=0.0

	DO I=2,NM1
	  B(I)=R(I)*R(I)+R1(I)*R1(I)+R2(I)*R2(I)
	  C(I)=R(I)*R1(I+1)+R1(I)*R2(I+1)
	  IF (I.NE.NM1) D(I)=R(I)*R2(I+2)
	ENDDO
	D(NM1)=0.0

	P=0.0
	F2=-S

C     NEXT ITERATION

300     E=0.0

C   REPOSITIONING OF NEXT CARD AVOIDS FORMER INITIALIZATION VIOLATION.04/10/75

	U(1)=0.0
	DO I=2,NM1
	  IF(I.EQ.2) GO TO 350
	  R2(I-2)=G*R(I-2)
	  E=G*R2(I-2)
350       R1(I-1)=F*R(I-1)
	  R(I)=1.0/(P*B(I)+T(I)-F*R1(I-1)-E)
	  U(I)=A(I)-R1(I-1)*U(I-1)
	  IF (I.NE.2) U(I)=U(I)-R2(I-2)*U(I-2)
	  F=P*C(I)+T1(I)-H*R1(I-1)
	  G=H
	  H=D(I)*P
	ENDDO
	U(N)=0.0

	DO I1=2,NM1
	  I=NM1+2-I1
	  U(I)=R(I)*U(I)-R1(I)*U(I+1)
	  IF (I.NE.NM1) U(I)=U(I)-R2(I)*U(I+2)
	ENDDO

	E=0.0
	H=0.0
	DO I=1,NM1
	  G=H
	  H=(U(I+1)-U(I))/(X(I+1)-X(I))
	  V(I)=(H-G)*DY(I)*DY(I)
	  E=E+V(I)*(H-G)
	ENDDO
	V(N)=-H*DY(N)*DY(N)
	E=E-V(N)*H
	G=F2
	F2=E*P*P
C   CONVERGENCE TEST RELAXED TO ELIMINATE FORMER NUMERICAL DIFFICULTY.04/10/75
	IF (F2 .GE. 0.9999*S .OR. 0.9999*F2 .LE. G) GO TO 800

	F=0.0
	H=(V(2)-V(1))/(X(2)-X(1))
	DO I= 2,NM1
	  G=H
	  H=(V(I+1)-V(I))/(X(I+1)-X(I))
	  G=H-G-R1(I-1)*R(I-1)
	  IF (I.NE.2) G=G-R2(I-2)*R(I-2)
	  F=F+G*R(I)*G
	  R(I)=G
	ENDDO
	H=E-P*F
 	IF (H.LE.0.0) GO TO 800
C
C     USE NEGATIVE BRANCH OF SQUARE ROOT IF X(I) ARE STRICTLY DECREASING
C
	P=P+(S-F2)/((P+SQRT(S/E))*H)
	GO TO 300
C
C     FINAL STEP AFTER CONVERGENCE
C
800     DO I=1,N
	  A(I)=Y(I)-P*V(I)
	  C(I)=U(I)
	ENDDO
	DO I=1,NM1
	  H=X(I+1)-X(I)
	  D(I)=(C(I+1)-C(I))/(3.0*H)
	  B(I)=(A(I+1)-A(I))/H-(H*D(I)+C(I))*H
	ENDDO
	RETURN
	END

        SUBROUTINE       SMOFCN(X1,Y1,N1,X,N,A,B,C,D)
C
C     SMOFCN COMPUTES VALUES OF A SPLINE-FITTED FUNCTION
C
C     SMOFCN CAN BE CALLED ONLY AFTER ARRAYS OF SPLINE COEFFICIENTS
C     HAVE BEEN COMPUTED BY SUBROUTINE SMOOTH.
C
C     X1 IS THE VECTOR OF INDEPENDENT VARIABLES AT WHICH SPLINE-
C         FITTED VALUES ARE TO BE COMPUTED.
C     Y1 IS THE VECTOR IN WHICH THE FUNCTION VALUES ARE RETURNED
C     N1 IS THE NUMBER OF ELEMENTS IN X1 AND Y1
C     X,N,A,B,C,D HAVE THE SAME SIGNIFICANCE AS IN SMOOTH
C
	REAL*4 X1(*),Y1(*),X(*),A(*),B(*),C(*),D(*)
	DO M1=1,N1
	  XP=X1(M1)
	  IF (XP.LT.X(1).OR.XP.GT.X(N)) GO TO 2000
	  DO M=1,N
     	    IF (XP.GE.X(M).AND.XP.LT.X(M+1)) GO TO 300
	  ENDDO
300       MM=M
	  D1=XP-X(MM)
	  D2=D1*D1
	  D3=D2*D1
     	  Y1(M1)=A(MM)+B(MM)*D1+C(MM)*D2+D(MM)*D3
	ENDDO
2000    PRINT 2001, M1,XP
2001    FORMAT('  POINT X(',I5,') =',F10.4,
     1  ' IS OUT OF RANGE OF THE SPLINE-FITTED VALUES')
	RETURN
	END















